# -*- coding: utf-8 -*-
"""store_load.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/178r1md_X2cCMtI5ICpXx_K97SRsjVOIW
"""

!pip install qiskit[visualization]
!pip install qiskit-aer
!pip install qiskit-ibm-runtime

from qiskit import QuantumCircuit
import numpy as np
from qiskit import qpy
from qiskit.visualization import plot_histogram
from qiskit_aer import AerSimulator
from qiskit_aer.library import set_statevector
from qiskit import transpile
import qiskit.quantum_info as qi
from qiskit.quantum_info import Statevector
from qiskit.providers.basic_provider import BasicSimulator
from qiskit.circuit.library import QFT
from qiskit.circuit import Instruction
from qiskit.circuit import CircuitInstruction
simulator_basic = BasicSimulator()
simulator_aer=AerSimulator()

# Create a quantum circuit
qc = QuantumCircuit(2)
qc.h(0)  # Apply a Hadamard gate on the first qubit
qc.cx(0, 1)  # Apply a CNOT gate
qc.save_statevector()
# Simulate the circuit to get the statevector
st = transpile(qc, backend=simulator_aer)
result = simulator_aer.run(st, shots=1024).result()
state = result.get_statevector()

# Save the statevector to a file (optional)
np.save('saved_statevector.npy', state.data)

# Load the saved statevector from the file (optional)
loaded_state = Statevector(np.load('saved_statevector.npy'))

# Alternatively, if kept in memory:
# loaded_state = state  # Use the previously saved state

# Initialize a new circuit with the loaded state
new_circuit = QuantumCircuit(2)
new_circuit.initialize(loaded_state.data, [0, 1])

# Perform further operations
new_circuit.h(0)
new_circuit.cx(0, 1)
new_circuit.save_statevector()
# Simulate the new circuit
new_result = simulator_aer.run(new_circuit,shots=1024).result()
new_state = new_result.get_statevector()

print(new_state)